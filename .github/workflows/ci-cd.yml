# Replace the main CI/CD workflow with comprehensive testing
cat > .github/workflows/ci-cd.yml << 'EOF'
name: 🚀 DevOps Social App - Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # COMPREHENSIVE INTEGRATION TESTING
  # ==========================================
  integration-tests:
    name: 🧪 Complete Integration Test Suite
    runs-on: ubuntu-latest
    outputs:
      slack-status: ${{ steps.slack-test.outputs.status }}
      jira-status: ${{ steps.jira-test.outputs.status }}
      issue-created: ${{ steps.jira-issue.outputs.issue-key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd app/backend && npm install || echo "Backend dependencies will install during Docker build"
        cd ../frontend && npm install || echo "Frontend dependencies will install during Docker build"
        cd ../..
        
    - name: 🔔 Test Slack Integration
      id: slack-test
      run: |
        echo "Testing Slack webhook integration..."
        
        # Test basic connectivity
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          --data '{"text":"🧪 **CI/CD Pipeline Started**\n\n**Repository:** ${{ github.repository }}\n**Branch:** ${{ github.ref_name }}\n**Commit:** ${{ github.sha }}\n**Trigger:** ${{ github.event_name }}\n\n🚀 Running complete integration tests..."}' \
          "${{ secrets.SLACK_WEBHOOK_URL }}")
        
        if [ "$response" = "200" ]; then
          echo "✅ Slack integration working"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Slack integration failed (HTTP: $response)"
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: 🎫 Test Jira Integration
      id: jira-test
      run: |
        echo "Testing Jira project access..."
        
        # Create test environment
        cat > .env << EOF
        JIRA_BASE_URL=${{ secrets.JIRA_BASE_URL }}
        JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
        JIRA_PROJECT_KEY=${{ secrets.JIRA_PROJECT_KEY }}
        EOF
        
        # Test Jira connection and project access
        node -e "
        require('dotenv').config();
        const JiraIntegration = require('./integrations/jira-integration.js');
        
        const jira = new JiraIntegration(
          process.env.JIRA_BASE_URL,
          process.env.JIRA_EMAIL,
          process.env.JIRA_API_TOKEN
        );
        
        jira.testConnection()
          .then(result => {
            if (result.success) {
              console.log('✅ Jira connection successful');
              console.log('User:', result.user.displayName);
              return jira.getIssueTypes(process.env.JIRA_PROJECT_KEY);
            } else {
              throw new Error('Connection failed: ' + result.error);
            }
          })
          .then(issueTypes => {
            console.log('✅ DPT project access confirmed');
            console.log('Available issue types:', issueTypes.map(t => t.name).join(', '));
            console.log('status=success');
          })
          .catch(err => {
            console.log('❌ Jira test failed:', err.message);
            console.log('status=failed');
            process.exit(1);
          });
        " > jira-output.txt
        
        cat jira-output.txt
        if grep -q "status=success" jira-output.txt; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: 🔗 Test Connected Slack + Jira Flow
      id: jira-issue
      if: steps.slack-test.outputs.status == 'success' && steps.jira-test.outputs.status == 'success'
      run: |
        echo "Testing connected Slack + Jira integration..."
        
        # Create Jira issue and send Slack notification
        node -e "
        require('dotenv').config();
        const SlackNotifier = require('./integrations/slack-webhook.js');
        const JiraIntegration = require('./integrations/jira-integration.js');
        
        async function testConnectedFlow() {
          const slack = new SlackNotifier('${{ secrets.SLACK_WEBHOOK_URL }}');
          const jira = new JiraIntegration(
            process.env.JIRA_BASE_URL,
            process.env.JIRA_EMAIL,
            process.env.JIRA_API_TOKEN
          );
          
          try {
            // Create CI/CD tracking issue
            const issue = await jira.createIssue(
              process.env.JIRA_PROJECT_KEY,
              '🚀 CI/CD Pipeline: ${{ github.sha }}',
              'Automated CI/CD pipeline execution tracking.\n\n**Pipeline Details:**\n- Repository: ${{ github.repository }}\n- Branch: ${{ github.ref_name }}\n- Commit: ${{ github.sha }}\n- Trigger: ${{ github.event_name }}\n- Timestamp: ' + new Date().toISOString() + '\n- Runner: GitHub Actions\n\n**Status:** Integration tests in progress\n\n✅ This issue confirms the CI/CD pipeline can create and track deployment issues.',
              'Email request',
              'Medium'
            );
            
            console.log('✅ CI/CD tracking issue created:', issue.key);
            console.log('issue-key=' + issue.key);
            
            // Send Slack notification about the issue
            await slack.sendSimpleMessage(
              '🎫 **CI/CD Issue Created**\n\n' +
              '**Issue:** ' + issue.key + '\n' +
              '**Project:** DPT (DevOps-Pipeline-Testing)\n' +
              '**Pipeline:** ${{ github.repository }}\n' +
              '**Commit:** ${{ github.sha }}\n' +
              '**URL:** ' + issue.url + '\n\n' +
              '✅ Slack + Jira integration working perfectly!'
            );
            
            console.log('✅ Slack notification sent about CI/CD issue');
            
            // Add pipeline status comment
            await jira.addComment(issue.key, 
              'Integration tests completed successfully:\n' +
              '✅ Slack notifications: Working\n' +
              '✅ Jira issue creation: Working\n' +
              '✅ Connected flow: Working\n\n' +
              'Pipeline proceeding to build and deployment stages.'
            );
            
            console.log('✅ Pipeline status updated in Jira');
            
          } catch (error) {
            console.error('❌ Connected flow failed:', error.message);
            process.exit(1);
          }
        }
        
        testConnectedFlow();
        " > connected-output.txt
        
        cat connected-output.txt
        ISSUE_KEY=$(grep "issue-key=" connected-output.txt | cut -d'=' -f2)
        if [ -n "$ISSUE_KEY" ]; then
          echo "issue-key=$ISSUE_KEY" >> $GITHUB_OUTPUT
        fi
        
    - name: 📊 Integration Test Summary
      run: |
        echo "🧪 Integration Test Results Summary"
        echo "=================================="
        echo "📱 Slack Integration: ${{ steps.slack-test.outputs.status }}"
        echo "🎫 Jira Integration: ${{ steps.jira-test.outputs.status }}"
        echo "🔗 Connected Flow: ${{ steps.jira-issue.outputs.issue-key && 'success' || 'skipped' }}"
        if [ -n "${{ steps.jira-issue.outputs.issue-key }}" ]; then
          echo "📋 Created Issue: ${{ steps.jira-issue.outputs.issue-key }}"
        fi
        echo "=================================="

  # ==========================================
  # CODE QUALITY & SECURITY
  # ==========================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
        
    - name: Security audit
      run: |
        echo "🔒 Running security audit..."
        npm audit --audit-level moderate || true
        
    - name: Check for secrets
      run: |
        echo "🔍 Checking for exposed secrets..."
        if grep -r "sk-" . --exclude-dir=node_modules --exclude-dir=.git || \
           grep -r "AKIA" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "⚠️ Potential secrets found - please review"
        fi
        echo "✅ Secret scan completed"

  # ==========================================
  # BUILD & DEPLOY
  # ==========================================
  build-and-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push images
      run: |
        echo "🏗️ Building Docker images..."
        
        # Build backend
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} ./app/backend
        docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        
        # Build frontend  
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} ./app/frontend
        docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        
        echo "✅ Images built and pushed successfully"
        
    - name: Deploy to staging
      if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment == 'staging'
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Backend: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "Frontend: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        # Add actual deployment commands here

  # ==========================================
  # NOTIFICATION & TRACKING
  # ==========================================
  pipeline-completion:
    name: 📊 Pipeline Completion
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality, build-and-deploy]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Send completion notification
      if: needs.integration-tests.outputs.slack-status == 'success'
      run: |
        # Determine overall status
        INTEGRATION_STATUS="${{ needs.integration-tests.result }}"
        QUALITY_STATUS="${{ needs.code-quality.result }}"
        BUILD_STATUS="${{ needs.build-and-deploy.result }}"
        
        if [ "$INTEGRATION_STATUS" = "success" ] && [ "$QUALITY_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ]; then
          OVERALL_STATUS="✅ SUCCESS"
          COLOR="good"
        elif [ "$INTEGRATION_STATUS" = "failure" ] || [ "$QUALITY_STATUS" = "failure" ] || [ "$BUILD_STATUS" = "failure" ]; then
          OVERALL_STATUS="❌ FAILED"
          COLOR="danger"
        else
          OVERALL_STATUS="⚠️ PARTIAL"
          COLOR="warning"
        fi
        
        # Send comprehensive pipeline status
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"fields\": [{
                \"title\": \"🚀 CI/CD Pipeline Complete - $OVERALL_STATUS\",
                \"value\": \"**Repository:** ${{ github.repository }}\\n**Branch:** ${{ github.ref_name }}\\n**Commit:** ${{ github.sha }}\\n**Trigger:** ${{ github.event_name }}\\n\\n**Results:**\\n📱 Integration Tests: $INTEGRATION_STATUS\\n🔍 Code Quality: $QUALITY_STATUS\\n🏗️ Build & Deploy: $BUILD_STATUS\\n\\n**Tracking Issue:** ${{ needs.integration-tests.outputs.issue-created || 'N/A' }}\",
                \"short\": false
              }],
              \"footer\": \"DevOps Social App\",
              \"ts\": $(date +%s)
            }]
          }" \
          "${{ secrets.SLACK_WEBHOOK_URL }}"
          
    - name: Update Jira issue
      if: needs.integration-tests.outputs.issue-created != ''
      run: |
        echo "Updating Jira issue with pipeline results..."
        
        cat > .env << EOF
        JIRA_BASE_URL=${{ secrets.JIRA_BASE_URL }}
        JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
        EOF
        
        node -e "
        require('dotenv').config();
        const JiraIntegration = require('./integrations/jira-integration.js');
        
        const jira = new JiraIntegration(
          process.env.JIRA_BASE_URL,
          process.env.JIRA_EMAIL,
          process.env.JIRA_API_TOKEN
        );
        
        const issueKey = '${{ needs.integration-tests.outputs.issue-created }}';
        const integrationStatus = '${{ needs.integration-tests.result }}';
        const qualityStatus = '${{ needs.code-quality.result }}';
        const buildStatus = '${{ needs.build-and-deploy.result }}';
        
        const comment = 'CI/CD Pipeline Completed\n\n' +
          'Final Results:\n' +
          '• Integration Tests: ' + integrationStatus + '\n' +
          '• Code Quality: ' + qualityStatus + '\n' +
          '• Build & Deploy: ' + buildStatus + '\n\n' +
          'Commit: ${{ github.sha }}\n' +
          'Completed: ' + new Date().toISOString();
        
        jira.addComment(issueKey, comment)
          .then(() => console.log('✅ Jira issue updated with pipeline results'))
          .catch(err => console.log('❌ Failed to update Jira:', err.message));
        "
EOF